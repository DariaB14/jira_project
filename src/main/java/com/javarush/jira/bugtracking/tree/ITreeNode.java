package com.javarush.jira.bugtracking.tree;

import com.javarush.jira.common.HasIdAndParentId;

import java.util.List;

public interface ITreeNode<T extends HasIdAndParentId, R extends ITreeNode<T, R>> {
    List<R> subNodes();
}

/*
ITreeNode — это обобщенный (generic) интерфейс, который определяет контракт для
узлов древовидной структуры. Он использует мощь дженериков Java для создания
типобезопасной иерархии.

Объявляет интерфейс с двумя параметрами типа:
T — тип данных узла (должен реализовывать HasIdAndParentId)
R — тип самого узла в дереве (должен реализовывать ITreeNode<T, R>)
Это рекурсивное определение позволяет создавать типобезопасные деревья,
где каждый узел знает типы своих данных и дочерних узлов.

T extends HasIdAndParentId: Гарантирует, что данные узла будут иметь как минимум
методы getId() и getParentId(), что критически важно для построения дерева.
Ограничение R extends ITreeNode<T, R>>:  рекурсивное ограничение типа. Оно гарантирует,
что все узлы в дереве будут одного типа и будут совместимы друг с другом.

Метод List<R> subNodes(): Возвращает список дочерних узлов.
Определяет структуру дерева. Каждый узел может иметь ноль или более дочерних узлов
того же типа R.

 */